/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ManageHistoryItem struct for ManageHistoryItem
type ManageHistoryItem struct {
	Date *string `json:"date,omitempty"`
	Type *string `json:"type,omitempty"`
	HasError *bool `json:"has_error,omitempty"`
}

// NewManageHistoryItem instantiates a new ManageHistoryItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManageHistoryItem() *ManageHistoryItem {
	this := ManageHistoryItem{}
	return &this
}

// NewManageHistoryItemWithDefaults instantiates a new ManageHistoryItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManageHistoryItemWithDefaults() *ManageHistoryItem {
	this := ManageHistoryItem{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ManageHistoryItem) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageHistoryItem) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ManageHistoryItem) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ManageHistoryItem) SetDate(v string) {
	o.Date = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ManageHistoryItem) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageHistoryItem) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ManageHistoryItem) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ManageHistoryItem) SetType(v string) {
	o.Type = &v
}

// GetHasError returns the HasError field value if set, zero value otherwise.
func (o *ManageHistoryItem) GetHasError() bool {
	if o == nil || o.HasError == nil {
		var ret bool
		return ret
	}
	return *o.HasError
}

// GetHasErrorOk returns a tuple with the HasError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageHistoryItem) GetHasErrorOk() (*bool, bool) {
	if o == nil || o.HasError == nil {
		return nil, false
	}
	return o.HasError, true
}

// HasHasError returns a boolean if a field has been set.
func (o *ManageHistoryItem) HasHasError() bool {
	if o != nil && o.HasError != nil {
		return true
	}

	return false
}

// SetHasError gets a reference to the given bool and assigns it to the HasError field.
func (o *ManageHistoryItem) SetHasError(v bool) {
	o.HasError = &v
}

func (o ManageHistoryItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.HasError != nil {
		toSerialize["has_error"] = o.HasError
	}
	return json.Marshal(toSerialize)
}

type NullableManageHistoryItem struct {
	value *ManageHistoryItem
	isSet bool
}

func (v NullableManageHistoryItem) Get() *ManageHistoryItem {
	return v.value
}

func (v *NullableManageHistoryItem) Set(val *ManageHistoryItem) {
	v.value = val
	v.isSet = true
}

func (v NullableManageHistoryItem) IsSet() bool {
	return v.isSet
}

func (v *NullableManageHistoryItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManageHistoryItem(val *ManageHistoryItem) *NullableManageHistoryItem {
	return &NullableManageHistoryItem{value: val, isSet: true}
}

func (v NullableManageHistoryItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManageHistoryItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


