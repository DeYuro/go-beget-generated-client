/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ManageVpsConfiguration Описывает параметры Vps
type ManageVpsConfiguration struct {
	// Идентификатор конфигурации
	Id *string `json:"id,omitempty"`
	// Имя конфигурации Vps
	Name *string `json:"name,omitempty"`
	// Количество ядер процессора, шт
	CpuCount *int32 `json:"cpu_count,omitempty"`
	// Объем дисковой квоты, Мб
	DiskSize *int32 `json:"disk_size,omitempty"`
	// Объем оперативной памяти, Мб
	Memory *int32 `json:"memory,omitempty"`
	// Цена в день
	PriceDay *float64 `json:"price_day,omitempty"`
	// Цена в месяц
	PriceMonth *float64 `json:"price_month,omitempty"`
	// Доступен ли для заказа пользователем
	Available *bool `json:"available,omitempty"`
	// Является ли конфигурация персональной
	Custom *bool `json:"custom,omitempty"`
}

// NewManageVpsConfiguration instantiates a new ManageVpsConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManageVpsConfiguration() *ManageVpsConfiguration {
	this := ManageVpsConfiguration{}
	return &this
}

// NewManageVpsConfigurationWithDefaults instantiates a new ManageVpsConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManageVpsConfigurationWithDefaults() *ManageVpsConfiguration {
	this := ManageVpsConfiguration{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManageVpsConfiguration) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageVpsConfiguration) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ManageVpsConfiguration) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ManageVpsConfiguration) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ManageVpsConfiguration) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageVpsConfiguration) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ManageVpsConfiguration) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ManageVpsConfiguration) SetName(v string) {
	o.Name = &v
}

// GetCpuCount returns the CpuCount field value if set, zero value otherwise.
func (o *ManageVpsConfiguration) GetCpuCount() int32 {
	if o == nil || o.CpuCount == nil {
		var ret int32
		return ret
	}
	return *o.CpuCount
}

// GetCpuCountOk returns a tuple with the CpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageVpsConfiguration) GetCpuCountOk() (*int32, bool) {
	if o == nil || o.CpuCount == nil {
		return nil, false
	}
	return o.CpuCount, true
}

// HasCpuCount returns a boolean if a field has been set.
func (o *ManageVpsConfiguration) HasCpuCount() bool {
	if o != nil && o.CpuCount != nil {
		return true
	}

	return false
}

// SetCpuCount gets a reference to the given int32 and assigns it to the CpuCount field.
func (o *ManageVpsConfiguration) SetCpuCount(v int32) {
	o.CpuCount = &v
}

// GetDiskSize returns the DiskSize field value if set, zero value otherwise.
func (o *ManageVpsConfiguration) GetDiskSize() int32 {
	if o == nil || o.DiskSize == nil {
		var ret int32
		return ret
	}
	return *o.DiskSize
}

// GetDiskSizeOk returns a tuple with the DiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageVpsConfiguration) GetDiskSizeOk() (*int32, bool) {
	if o == nil || o.DiskSize == nil {
		return nil, false
	}
	return o.DiskSize, true
}

// HasDiskSize returns a boolean if a field has been set.
func (o *ManageVpsConfiguration) HasDiskSize() bool {
	if o != nil && o.DiskSize != nil {
		return true
	}

	return false
}

// SetDiskSize gets a reference to the given int32 and assigns it to the DiskSize field.
func (o *ManageVpsConfiguration) SetDiskSize(v int32) {
	o.DiskSize = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *ManageVpsConfiguration) GetMemory() int32 {
	if o == nil || o.Memory == nil {
		var ret int32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageVpsConfiguration) GetMemoryOk() (*int32, bool) {
	if o == nil || o.Memory == nil {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *ManageVpsConfiguration) HasMemory() bool {
	if o != nil && o.Memory != nil {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int32 and assigns it to the Memory field.
func (o *ManageVpsConfiguration) SetMemory(v int32) {
	o.Memory = &v
}

// GetPriceDay returns the PriceDay field value if set, zero value otherwise.
func (o *ManageVpsConfiguration) GetPriceDay() float64 {
	if o == nil || o.PriceDay == nil {
		var ret float64
		return ret
	}
	return *o.PriceDay
}

// GetPriceDayOk returns a tuple with the PriceDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageVpsConfiguration) GetPriceDayOk() (*float64, bool) {
	if o == nil || o.PriceDay == nil {
		return nil, false
	}
	return o.PriceDay, true
}

// HasPriceDay returns a boolean if a field has been set.
func (o *ManageVpsConfiguration) HasPriceDay() bool {
	if o != nil && o.PriceDay != nil {
		return true
	}

	return false
}

// SetPriceDay gets a reference to the given float64 and assigns it to the PriceDay field.
func (o *ManageVpsConfiguration) SetPriceDay(v float64) {
	o.PriceDay = &v
}

// GetPriceMonth returns the PriceMonth field value if set, zero value otherwise.
func (o *ManageVpsConfiguration) GetPriceMonth() float64 {
	if o == nil || o.PriceMonth == nil {
		var ret float64
		return ret
	}
	return *o.PriceMonth
}

// GetPriceMonthOk returns a tuple with the PriceMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageVpsConfiguration) GetPriceMonthOk() (*float64, bool) {
	if o == nil || o.PriceMonth == nil {
		return nil, false
	}
	return o.PriceMonth, true
}

// HasPriceMonth returns a boolean if a field has been set.
func (o *ManageVpsConfiguration) HasPriceMonth() bool {
	if o != nil && o.PriceMonth != nil {
		return true
	}

	return false
}

// SetPriceMonth gets a reference to the given float64 and assigns it to the PriceMonth field.
func (o *ManageVpsConfiguration) SetPriceMonth(v float64) {
	o.PriceMonth = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *ManageVpsConfiguration) GetAvailable() bool {
	if o == nil || o.Available == nil {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageVpsConfiguration) GetAvailableOk() (*bool, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *ManageVpsConfiguration) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *ManageVpsConfiguration) SetAvailable(v bool) {
	o.Available = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *ManageVpsConfiguration) GetCustom() bool {
	if o == nil || o.Custom == nil {
		var ret bool
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageVpsConfiguration) GetCustomOk() (*bool, bool) {
	if o == nil || o.Custom == nil {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *ManageVpsConfiguration) HasCustom() bool {
	if o != nil && o.Custom != nil {
		return true
	}

	return false
}

// SetCustom gets a reference to the given bool and assigns it to the Custom field.
func (o *ManageVpsConfiguration) SetCustom(v bool) {
	o.Custom = &v
}

func (o ManageVpsConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CpuCount != nil {
		toSerialize["cpu_count"] = o.CpuCount
	}
	if o.DiskSize != nil {
		toSerialize["disk_size"] = o.DiskSize
	}
	if o.Memory != nil {
		toSerialize["memory"] = o.Memory
	}
	if o.PriceDay != nil {
		toSerialize["price_day"] = o.PriceDay
	}
	if o.PriceMonth != nil {
		toSerialize["price_month"] = o.PriceMonth
	}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	if o.Custom != nil {
		toSerialize["custom"] = o.Custom
	}
	return json.Marshal(toSerialize)
}

type NullableManageVpsConfiguration struct {
	value *ManageVpsConfiguration
	isSet bool
}

func (v NullableManageVpsConfiguration) Get() *ManageVpsConfiguration {
	return v.value
}

func (v *NullableManageVpsConfiguration) Set(val *ManageVpsConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableManageVpsConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableManageVpsConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManageVpsConfiguration(val *ManageVpsConfiguration) *NullableManageVpsConfiguration {
	return &NullableManageVpsConfiguration{value: val, isSet: true}
}

func (v NullableManageVpsConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManageVpsConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


